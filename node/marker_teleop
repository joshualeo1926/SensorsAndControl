#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

MAX_LIN_VEL = 0.22
MAX_ANG_VEL = 2.84

LIN_INC = 0.01
ANG_INC = 0.05

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w    e
   a    s    d
        


w/s : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, e : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('cmd_vel_marker', Twist, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    move_bindings = {
		'w':(+LIN_INC, 0),
		'a':(0, +ANG_INC),
		'd':(0, -ANG_INC),
		's':(-LIN_INC, 0),
		'e':(0, 0),
		}
    try:
	print(msg)
	while(1):
	    key = getKey()
	    if (key == '\x03'):
	        break
	    elif key in ['w', 's', 'a', 'd']:
	        control = move_bindings[key]
	        control_linear_vel = control_linear_vel + control[0]
	        control_angular_vel = control_angular_vel + control[1]
	        print(vels(control_linear_vel,control_angular_vel))

            elif key in [' ', 'e']:
                control_linear_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(control_linear_vel, control_angular_vel))

            if status == 20:
                print(msg)
                status = 0

            if control_linear_vel > MAX_LIN_VEL:
	        control_linear_vel = MAX_LIN_VEL

	    if control_linear_vel < -MAX_LIN_VEL:
	        control_linear_vel = -MAX_LIN_VEL

            if control_angular_vel > MAX_ANG_VEL:
	        control_angular_vel = MAX_ANG_VEL

	    if control_angular_vel < -MAX_ANG_VEL:
	        control_angular_vel = -MAX_ANG_VEL
	    twist = Twist()
            twist.linear.x = control_linear_vel;
	    twist.linear.y = 0.0
	    twist.linear.z = 0.0
            twist.angular.x = 0.0
	    twist.angular.y = 0.0
	    twist.angular.z = control_angular_vel

            pub.publish(twist)
    
    except Exception as e:
	print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0
	twist.linear.y = 0
	twist.linear.z = 0
        twist.angular.x = 0
	twist.angular.y = 0
	twist.angular.z = 0
        pub.publish(twist)

 
    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
